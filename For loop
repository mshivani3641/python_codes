A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a 
string). 
fruits = ["apple", "banana", "cherry"] 
for x in fruits: 
print(x) 
o/p:: 
apple 
banana 
cherry 
Looping Through a String 
for x in "banana": 
print(x) 
o/p:: 
b 
a 
n 
a 
n 
a 

->The break Statement 
With the break statement we can stop the loop before it has looped through all the items: 
fruits = ["apple", "banana", "cherry"] 
for x in fruits: 
print(x)  
if x == "banana": 
break 
o/p::: 
apple 
banana 

->The continue Statement 
fruits = ["apple", "banana", "cherry"] 
for x in fruits: 
  if x == "banana": 
    continue 
  print(x) 
o/p::: 
apple 
cherry 
The range() Function 
for x in range(6): 
  print(x) 
o/p:: 
0 
1 
2 
3 
4 
5 

->Specifying 2 parameters in range fumction:: 
for x in range(2, 6): 
  print(x) 
o/p:: 
2 
3 
4 
5 

->To add increment value we specify 3rd parameter also: 
for x in range(2, 30, 3): 
  print(x) 
o/p::: 
2 
5 
8 
11 
14 
17 
20 
23 
26 
29 

->Else in For Loop 
Print all numbers from 0 to 5, and print a message when the loop has ended: 
for x in range(6): 
  print(x) 
else: 
  print("Finally finished!") 
 
o/p:: 
0 
1 
2 
3 
4 
5 
Finally finished! 
 
->Nested Loops 
adj = ["red", "big", "tasty"] 
fruits = ["apple", "banana", "cherry"] 
 
for x in adj: 
  for y in fruits: 
    print(x, y) 
 
o/p::: 
red apple 
red banana 
red cherry 
big apple 
big banana 
big cherry 
tasty apple 
tasty banana 
tasty cherry 
 
->The pass Statement 
for loops cannot be empty, but if you for some reason have a for loop with no content, put in the 
pass statement to avoid getting an error. 
 
for x in [0, 1, 2]: 
  pass 
 
o/p::A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a 
string). 
fruits = ["apple", "banana", "cherry"] 
for x in fruits: 
print(x) 
o/p:: 
apple 
banana 
cherry 
Looping Through a String 
for x in "banana": 
print(x) 
o/p:: 
b 
a 
n 
a 
n 
a

->The break Statement 
With the break statement we can stop the loop before it has looped through all the items: 
fruits = ["apple", "banana", "cherry"] 
for x in fruits: 
print(x)  
if x == "banana": 
break 
o/p::: 
apple 
banana

->The continue Statement 
fruits = ["apple", "banana", "cherry"] 
for x in fruits: 
  if x == "banana": 
    continue 
  print(x) 
o/p::: 
apple 
cherry

->The range() Function 
for x in range(6): 
  print(x) 
o/p:: 
0 
1 
2 
3 
4 
5 

->Specifying 2 parameters in range fumction:: 
for x in range(2, 6): 
  print(x) 
o/p:: 
2 
3 
4 
5 

->To add increment value we specify 3rd parameter also: 
for x in range(2, 30, 3): 
  print(x) 
o/p::: 
2 
5 
8 
11 
14 
17 
20 
23 
26 
29

->Else in For Loop 
Print all numbers from 0 to 5, and print a message when the loop has ended: 
for x in range(6): 
  print(x) 
else: 
  print("Finally finished!") 
 
o/p:: 
0 
1 
2 
3 
4 
5 
Finally finished! 
 
Nested Loops 
adj = ["red", "big", "tasty"] 
fruits = ["apple", "banana", "cherry"] 
 
for x in adj: 
  for y in fruits: 
    print(x, y) 
 
o/p::: 
red apple 
red banana 
red cherry 
big apple 
big banana 
big cherry 
tasty apple 
tasty banana 
tasty cherry 
 
The pass Statement 
for loops cannot be empty, but if you for some reason have a for loop with no content, put in the 
pass statement to avoid getting an error. 
 
for x in [0, 1, 2]: 
  pass 
 
o/p::A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a 
string). 
fruits = ["apple", "banana", "cherry"] 
for x in fruits: 
print(x) 
o/p:: 
apple 
banana 
cherry 
Looping Through a String 
for x in "banana": 
print(x) 
o/p:: 
b 
a 
n 
a 
n 
a 
The break Statement 
With the break statement we can stop the loop before it has looped through all the items: 
fruits = ["apple", "banana", "cherry"] 
for x in fruits: 
print(x)  
if x == "banana": 
break 
o/p::: 
apple 
banana 
The continue Statement 
fruits = ["apple", "banana", "cherry"] 
for x in fruits: 
  if x == "banana": 
    continue 
  print(x) 
o/p::: 
apple 
cherry 
The range() Function 
for x in range(6): 
  print(x) 
o/p:: 
0 
1 
2 
3 
4 
5 
Specifying 2 parameters in range fumction:: 
for x in range(2, 6): 
  print(x) 
o/p:: 
2 
3 
4 
5 
To add increment value we specify 3rd parameter also: 
for x in range(2, 30, 3): 
  print(x) 
o/p::: 
2 
5 
8 
11 
14 
17 
20 
23 
26 
29  
Else in For Loop 
Print all numbers from 0 to 5, and print a message when the loop has ended: 
for x in range(6): 
  print(x) 
else: 
  print("Finally finished!") 
 
o/p:: 
0 
1 
2 
3 
4 
5 
Finally finished! 
 
Nested Loops 
adj = ["red", "big", "tasty"] 
fruits = ["apple", "banana", "cherry"] 
 
for x in adj: 
  for y in fruits: 
    print(x, y) 
 
o/p::: 
red apple 
red banana 
red cherry 
big apple 
big banana 
big cherry 
tasty apple 
tasty banana 
tasty cherry 
 
The pass Statement 
for loops cannot be empty, but if you for some reason have a for loop with no content, put in the 
pass statement to avoid getting an error. 
 
for x in [0, 1, 2]: 
  pass 
 
o/p::
